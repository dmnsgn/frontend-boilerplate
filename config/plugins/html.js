import shortid from "shortid";
import HtmlWebpackPlugin from "html-webpack-plugin";
import HtmlWebpackProcessingPlugin from "html-webpack-processing-plugin";
import validator from "html-validator";

import posthtml from "posthtml";
import posthtmlImageSources from "./posthtml-image-sources.js";

import { NODE_ENV, PACKAGE, GIT_INFO } from "../config.js";

const minifyOptions = {
  caseSensitive: false,
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: false,
  collapseWhitespace: true,
  conservativeCollapse: false,
  customAttrAssign: [],
  customAttrCollapse: /ng-class/,
  customAttrSurround: [],
  customEventAttributes: [/^on[a-z]{3,}$/],
  decodeEntities: true,
  html5: true,
  ignoreCustomComments: [/^!/],
  ignoreCustomFragments: [/<%[\s\S]*?%>/, /<\?[\s\S]*?\?>/],
  includeAutoGeneratedTags: false,
  keepClosingSlash: false,
  maxLineLength: 0,
  minifyCSS: true,
  minifyJS: true,
  preserveLineBreaks: false,
  preventAttributesEscaping: false,
  processConditionalComments: true,
  processScripts: ["text/html"],
  quoteCharacter: '"',
  removeAttributeQuotes: true,
  removeComments: true,
  removeEmptyAttributes: true,
  removeEmptyElements: false,
  removeOptionalTags: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  removeTagWhitespace: true,
  sortAttributes: true,
  sortClassName: true,
  trimCustomFragments: true,
  useShortDoctype: false,
};

const templateData = {
  lang: PACKAGE.config.lang,
  og: {
    title: PACKAGE.config.title,
    description: PACKAGE.config.description,
    type: PACKAGE.config.type,
    url: PACKAGE.config.url,
    image: `${PACKAGE.config.url}/share.jpg`,
    imageWidth: PACKAGE.config.imageWidth,
    imageHeight: PACKAGE.config.imageHeight,
  },
  twitter: {
    card: PACKAGE.config.card,
    handle: PACKAGE.config.handle,
    imageAlt: PACKAGE.config.description,
  },
  analyticsUA: PACKAGE.config.analyticsUA,
  gitInfo: GIT_INFO,
  NODE_ENV: NODE_ENV,
};

const htmlPages = [];

const getPageInstanceRecursively = (page) => {
  if (!page.pages) return;

  page.pages.forEach((page) => {
    getPageInstanceRecursively(page);
    htmlPages.push(
      new HtmlWebpackPlugin({
        filename: page.id === "index" ? "index.html" : `${page.id}/index.html`,
        title: page.name
          ? `${page.name} Â· ${PACKAGE.config.title}`
          : PACKAGE.config.title,
        description: page.description || PACKAGE.config.description,
        inject: true,
        template: page.template || "templates/index.ejs",
        minify: NODE_ENV === "development" ? false : minifyOptions,
        page,
        pages: PACKAGE.config.pages,
        postProcessing: (content) => {
          let result;

          // Add hash to svg
          content = content.replace(
            /sprite.svg/g,
            `sprite.svg?${shortid.generate()}`
          );

          // Wrap images in a picture element with a webp source and original image as fallback
          try {
            result = posthtml()
              .use(
                posthtmlImageSources({
                  replaceExtension: true,
                  classIgnore: ["u-no-picture-wrap"],
                  extensionIgnore: ["svg", "gif"],
                })
              )
              .process(content, { sync: true });
          } catch (error) {
            console.log(error);

            return content;
          }

          // Validate html
          (async () => {
            try {
              console.log(
                `Validating page: ${page.id}\n${await validator({
                  data: result.html,
                  format: "text",
                })}`
              );
            } catch (error) {
              console.error(error);
            }
          })();

          return result.html;
        },
        ...templateData,
      })
    );
  });
};
getPageInstanceRecursively(PACKAGE.config);

const htmlProcessing = new HtmlWebpackProcessingPlugin();

export { htmlPages, htmlProcessing };
